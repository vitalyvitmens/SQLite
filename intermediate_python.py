# TODO: Intermediate Python (Промежуточный Python)
#  Если вы уже знакомы с основами Python и хотите расширить свои знания, этот курс для вас.
#  Вы узнаете о типах коллекций Python, лямбда-функциях, генераторах, декораторах,
#  объектно-ориентированном программировании и многом другом.

# TODO: Welcome! (Добро пожаловать!)
#  Добро пожаловать на курс Python для среднего уровня.
#  В этом курсе вы узнаете о типах коллекций Python, лямбда-функциях, генераторах, декораторах, ООП и многом другом.
#  Мы также создадим реальные проекты и решим несколько задач программирования.
#  Этот курс предназначен для разработчиков Python среднего уровня,
#  которые уже знают основы Python и хотят расширить свои знания.
#  Если вы новичок в Python, мы предлагаем вам начать с нашего курса Python для начинающих.
# n = [2, 4, 6, 8]
# res = 1
# for x in n[1:3]:
#     res *= x
#
# print(res)

# TODO: Dictionaries (Словари)
#  Python предоставляет ряд встроенных типов коллекций для хранения нескольких значений.
#  Списки являются одним из этих типов коллекций и позволяют хранить индексированные значения:
# x = ['hi', 'hello', 'welcome']
# print(x[2])
# TODO: Каждый элемент списка имеет индекс, который устанавливается автоматически.
#  Словари — это еще один тип коллекций, которые позволяют сопоставлять произвольные ключи со значениями.
#  Словари можно индексировать так же, как и списки, используя квадратные скобки, содержащие ключи.
#  Каждый элемент словаря представлен парой ключ:значение.
#  Пример:
# ages = {"Dave": 24, "Mary": 42, "John": 58}
# print(ages["Dave"])
# print(ages["Mary"])

# TODO: Dictionaries (Словари)
#  В качестве ключей к словарям можно использовать только неизменяемые объекты.
#  Неизменяемые объекты — это объекты, которые нельзя изменить.
#  До сих пор единственными изменяемыми объектами, с которыми вы сталкивались, были списки и словари.
#  Поскольку списки изменяемы, приведенный ниже код выдает ошибку.
#  Это означает, что вы можете использовать строки, целые числа,
#  логические значения и любые другие неизменяемые типы в качестве ключей словаря.
# bad_dict = {
#     [1, 2, 3]: "one two three",
# }

# TODO: ЗАДАЧА: Dictionaries Словари
#  Вы работаете в автосалоне и храните данные об автомобиле в словаре:
#  car = {
#     'brand': 'BMW',
#     'year': 2018,
#     'color': 'red'
#  }
#  Ваша программа должна принимать ключ в качестве входных данных и выводить соответствующее значение.
#  Sample Input:
#  year
#  Sample Output:
#  2018
#  Данные уже определены в коде.
# car = {
#     'brand': 'BMW',
#     'year': 2018,
#     'color': 'red',
#     'mileage': 15000
# }
# print(car[input()])

# TODO: Dictionaries (Словари)
#  Чтобы определить, находится ли ключ в словаре, вы можете использовать in и not in так же, как и для списка.
#  Пример:
# nums = {
#     1: "one",
#     2: "two",
#     3: "three",
# }
# print(1 in nums)
# print("three" in nums)
# print(4 not in nums)

# TODO: Dictionaries (Словари) Полезной словарной функцией является get.
#  Он делает то же самое, что и индексация, но если ключ не найден в словаре,
#  вместо этого возвращается другое указанное значение.
#  Чтобы определить количество элементов в словаре, используйте функцию len() .
#  Пример:
# pairs = {1: "apple",
#          "orange": [2, 3, 4],
#          True: False,
#          12: "True",
#          }
#
# print(pairs.get("orange"))
# print(pairs.get(7, 42))
# print(pairs.get(12345, "not found"))

# TODO: ЗАДАЧА: Dictionary Functions (Функции словаря)
#  Вы работаете с данными, отражающими рейтинг экономической свободы по странам.
#  Каждое название страны и ранг хранятся в словаре, где ключом является название страны.
#  Завершите программу, чтобы взять название страны в качестве входных данных
#  и вывести соответствующий рейтинг экономической свободы.
#  Если указанное название страны отсутствует в данных, выведите «Not found».
#  Вспомните метод словаря get(), который позволяет указать значение по умолчанию.
# data = {
#     'Singapore': 1,
#     'Ireland': 6,
#     'United Kingdom': 7,
#     'Germany': 27,
#     'Armenia': 34,
#     'United States': 17,
#     'Canada': 9,
#     'Italy': 74
# }
# print(data.get(input(), 'Not found'))

# fib = {1: 1, 2: 1, 3: 2, 4: 3}
# print(fib.get(4, 0) + fib.get(7, 5))

# TODO: Tuples (Кортежи)
#  Кортежи очень похожи на списки, за исключением того, что они неизменяемы (их нельзя изменить).
#  Кроме того, они создаются с использованием круглых скобок, а не квадратных скобок.
#  Пример:
#  words = ("spam", "eggs", "sausages")
#  Вы можете получить доступ к значениям в кортеже с их индексом, как и со списками:
# words = ("spam", "eggs", "sausages",)
# print(words[0])
# TODO: Попытка переназначить значение в кортеже приводит к ошибке.
#  Подобно спискам и словарям, кортежи могут быть вложены друг в друга.
# words = ("spam", "eggs", "sausages",)
# words[1] = "cheese"

# TODO: Tuples (Кортежи)
#  Кортежи можно создавать без круглых скобок, просто разделяя значения запятыми.
#  Кортежи быстрее, чем списки, но их нельзя изменить.
#  Пример:
# my_tuple = "one", "two", "three"
# print(my_tuple[0])

# TODO: ЗАДАЧА: Tuples (Кортежи)
#  Вам предоставляется список контактов, где каждый контакт представлен кортежем с именем и возрастом контакта.
#  Завершите программу, чтобы получить строку в качестве входных данных,
#  найти имя в списке контактов и вывести возраст контакта в формате, представленном ниже:
#  Sample Input:
#  John
#  Sample Output:
#  John is 31
#  Если контакт не найден, программа должна вывести "Not Found".
# contacts = [
#     ('James', 42),
#     ('Amy', 24),
#     ('John', 31),
#     ('Amanda', 63),
#     ('Bob', 18)
# ]
# dict_contacts = dict(contacts)
# name = input()
# if name in dict_contacts:
#     print(f'{name} is {dict_contacts[name]}')
# else:
#     print('Not Found')

# contacts = [
#     ('James', 42),
#     ('Amy', 24),
#     ('John', 31),
#     ('Amanda', 63),
#     ('Bob', 18),
# ]
# name = input()
# for i in contacts:
#     if name in i:
#         print(f'{i[0]} is {i[1]}')
#         break
# else:
#     print('Not Found')

