# TODO: Data Science (Наука о данных)
#  Наука о данных — обязательная дисциплина в эпоху больших данных.
#  Сегодня компании и отрасли должны принимать решения на основе данных,
#  чтобы выжить. Узнайте, как работает наука о данных.

# TODO: Data Manipulation (Манипуляция данными)

# TODO: Welcome to Data Science (Добро пожаловать в науку о данных)
#  Поздравляем! Вы сделали большой шаг к тому, чтобы стать специалистом по данным!
#  В дополнение к прохождению этого курса не забудьте воспользоваться всей поддержкой обучения,
#  доступной вам на SoloLearn, включая ежедневные советы, практики «Попробуйте сами», задачи тренера по коду,
#  игровую площадку для кода и участие в нашем замечательном сообществе учащихся.
#  Мы рады услышать от вас, поэтому, пожалуйста, оставляйте комментарии и отзывы, когда вы учитесь с нами.
#  Давайте начнем!

# TODO: What is Data Science? (Что такое наука о данных?)
#  В бизнесе существует множество вариантов использования науки о данных,
#  включая поиск лучшего алгоритма прогнозирования цен на жилье для Zillow,
#  поиск ключевых атрибутов, связанных с качеством вина,
#  и создание системы рекомендаций для увеличения рейтинга кликов для Amazon.
#  Извлечение информации из, казалось бы, случайных данных, наука о данных обычно включает в себя сбор данных,
#  очистку данных, выполнение исследовательского анализа данных,
#  создание и оценку моделей машинного обучения и передачу информации заинтересованным сторонам.
#  Наука о данных — это междисциплинарная область, которая объединяет статистику,
#  анализ данных, машинное обучение и связанные с ними методы для извлечения знаний и идей.

# TODO: Why Python? (Почему питон?)
#  В этом курсе «Введение в науку о данных» мы изучаем науку о данных с помощью Python.
#  Будучи языком программирования общего назначения,
#  Python в настоящее время является самым популярным языком программирования в науке о данных.
#  Он прост в использовании, имеет отличную поддержку сообщества и хорошо интегрируется
#  с другими платформами (например, веб-приложениями) в инженерной среде.
#  Этот курс посвящен исследовательскому анализу данных с помощью
#  трех фундаментальных библиотек Python: numpy, pandas и matplotlib.
#  Также будет рассмотрена библиотека машинного обучения scikit-learn.
#  В более поздних модулях мы будем прогнозировать стоимость домов с помощью линейной регрессии,
#  определять классы ириса с помощью алгоритмов классификации и находить
#  кластеры в винах — всего лишь несколько примеров того, что мы можем делать в науке о данных.
#  В науке о данных есть и другие популярные языки программирования,
#  такие как R, который имеет преимущество в статистическом моделировании.

# TODO: Numerical Data (Числовые данные)
#  Наборы данных поступают из самых разных источников и форматов: это могут быть наборы числовых измерений,
#  текстовый корпус, изображения, аудиоклипы или вообще что угодно.
#  Независимо от формата, первым шагом в науке о данных является преобразование его в массивы чисел.
#  Мы собрали 45 показателей роста президента США в сантиметрах в хронологическом порядке
#  и сохранили их в списке — встроенном типе данных в python.
# heights = [189, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183,
#            193, 178, 173, 174, 183, 183, 180, 168, 180, 170, 178, 182, 180, 183, 178,
#            182, 188, 175, 179, 183, 193, 182, 183, 177, 185, 188, 188, 182, 185, 191]
# TODO: В данном примере Джордж Вашингтон был первым президентом, а его рост составлял 189 см.
#  Если бы мы хотели узнать, сколько президентов выше 188 см, мы могли бы пройтись по списку,
#  сравнить каждый элемент со 188 и увеличить количество на 1 по мере выполнения критерия.
# heights = [189, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183,
#            193, 178, 173, 174, 183, 183, 180, 168, 180, 170, 178, 182, 180, 183, 178,
#            182, 188, 175, 179, 183, 193, 182, 183, 177, 185, 188, 188, 182, 185, 191]
#
# cnt = 0
# for height in heights:
#     if height > 188:
#         cnt += 1
# print(cnt)
# TODO: Это показывает, что есть пять президентов, которые выше 188 см.
#  Независимо от формата данных, первым шагом в науке о данных является преобразование их в массивы чисел.

# TODO: Introduction to Numpy (Введение в Numpy)
#  Numpy (сокращение от Numerical Python) позволяет нам с легкостью найти ответ на вопрос,
#  сколько президентов выше 188 см. Ниже мы покажем, как использовать библиотеку и начнем с базового объекта в numpy.
# import numpy as np
#
# heights = [189, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183,
#            193, 178, 173, 174, 183, 183, 180, 168, 180, 170, 178, 182, 180, 183, 178,
#            182, 188, 175, 179, 183, 193, 182, 183, 177, 185, 188, 188, 182, 185, 191]
#
# heights_arr = np.array(heights)
# print((heights_arr > 188).sum())
# TODO: Оператор import позволяет нам получить доступ к функциям и модулям внутри библиотеки numpy.
#  Библиотека будет использоваться часто, поэтому по соглашению numpy импортируется под более коротким именем, np.
#  Вторая строка предназначена для преобразования списка в объект массива numpy через np.array(),
#  с которым могут работать инструменты, предоставляемые в numpy.
#  Последняя строка предоставляет простое и естественное решение исходного вопроса с помощью numpy.
#  По мере того, как наши наборы данных становятся больше и сложнее,
#  numpy позволяет нам использовать более эффективный метод без циклов for для обработки и анализа наших данных.
#  Наш пример набора данных в этом модуле будет включать рост, возраст и партийную принадлежность президентов США.
#  Модули Python могут получить доступ к коду из другого модуля, импортировав файл/функцию с помощью оператора import.

# TODO: Size and Shape (Размер и форма)
#  Класс массива в Numpy называется ndarray или n-мерным массивом.
#  Мы можем использовать это для подсчета количества президентов в heights_arr,
#  используя атрибут numpy.ndarray.size.
# import numpy as np
#
# heights = [189, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183,
#            193, 178, 173, 174, 183, 183, 180, 168, 180, 170, 178, 182, 180, 183, 178,
#            182, 188, 175, 179, 183, 193, 182, 183, 177, 185, 188, 188, 182, 185, 191]
#
# heights_arr = np.array(heights)
# print(heights_arr.size)
# TODO: Обратите внимание, что после создания массива в numpy его размер нельзя изменить.
#  Размер говорит нам, насколько велик массив, форма говорит нам о размере.
#  Чтобы получить текущую форму массива, используйте форму атрибута:
# import numpy as np
#
# heights = [189, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183,
#            193, 178, 173, 174, 183, 183, 180, 168, 180, 170, 178, 182, 180, 183, 178,
#            182, 188, 175, 179, 183, 193, 182, 183, 177, 185, 188, 188, 182, 185, 191]
#
# heights_arr = np.array(heights)
# print(heights_arr.shape)
# TODO: На выходе получается кортеж, вспомним, что кортеж встроенного типа данных является неизменяемым,
#  в то время как список является изменяемым и содержит одно значение, указывающее,
#  что существует только одно измерение, т.е. ось 0.
#  Вдоль оси 0 имеется 45 элементов (по одному для каждого президента) Здесь heights_arr — это массив из 1d.
#  Размер атрибута в numpy аналогичен встроенному методу len в python, который используется
#  для вычисления длины итерируемых объектов python, таких как str, list, dict и т.д.

# TODO: Reshape (Изменить форму)
#  Другие данные, которые мы собрали, включают возраст президентов:
# ages = [57, 61, 57, 57, 58, 57, 61, 54, 68, 51, 49, 64, 50, 48, 65, 52, 56, 46, 54, 49, 51, 47, 55,
#         55, 54, 42, 51, 56, 55, 51, 54, 51, 60, 62, 43, 55, 56, 61, 52, 69, 64, 46, 54, 47, 70]
# TODO: Поскольку и рост, и возраст относятся к одним и тем же президентам, мы можем их объединить:
# import numpy as np
#
# heights = [189, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183,
#            193, 178, 173, 174, 183, 183, 180, 168, 180, 170, 178, 182, 180, 183, 178,
#            182, 188, 175, 179, 183, 193, 182, 183, 177, 185, 188, 188, 182, 185, 191]
#
# ages = [57, 61, 57, 57, 58, 57, 61, 54, 68, 51, 49, 64, 50, 48, 65, 52, 56, 46, 54, 49, 51, 47, 55,
#         55, 54, 42, 51, 56, 55, 51, 54, 51, 60, 62, 43, 55, 56, 61, 52, 69, 64, 46, 54, 47, 70]
#
# heights_and_ages = heights + ages
# # convert a list to a numpy array (преобразовать список в массив numpy)
# heights_and_ages_arr = np.array(heights_and_ages)
# print(heights_and_ages_arr.shape)
# TODO: Это создает один длинный массив. Было бы понятнее, если бы мы могли выровнять рост и возраст
#  для каждого президента и реорганизовать данные в матрицу 2 на 45, где первая строка содержит все росты,
#  а вторая строка — возраст. Для этого можно создать новый массив,
#  вызвав numpy.ndarray.reshape с новыми размерами, указанными в кортеже:
# import numpy as np
#
# heights = [189, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183,
#            193, 178, 173, 174, 183, 183, 180, 168, 180, 170, 178, 182, 180, 183, 178,
#            182, 188, 175, 179, 183, 193, 182, 183, 177, 185, 188, 188, 182, 185, 191]
#
# ages = [57, 61, 57, 57, 58, 57, 61, 54, 68, 51, 49, 64, 50, 48, 65, 52, 56, 46, 54, 49, 51, 47, 55,
#         55, 54, 42, 51, 56, 55, 51, 54, 51, 60, 62, 43, 55, 56, 61, 52, 69, 64, 46, 54, 47, 70]
#
# heights_and_ages = heights + ages
# # convert a list to a numpy array (преобразовать список в массив numpy)
# heights_and_ages_arr = np.array(heights_and_ages)
# print(heights_and_ages_arr.reshape((2, 45)))
# TODO: Измененный массив теперь представляет собой 2darray, но обратите внимание, что исходный массив не изменился.
#  Мы можем изменить форму массива несколькими способами,
#  если размер измененного массива соответствует размеру исходного.
#  Numpy может рассчитать для нас форму (размер), если мы укажем неизвестное измерение как -1.
#  Например, для заданного 2darray `arr` формы (3,4), arr.reshape(-1)
#  выведет 1darray формы (12,), а arr.reshape((-1,2)) создаст 2dray формы (6,2).

# TODO: Data Type (Тип данных)
#  Еще одна характеристика массива numpy заключается в том, что он однородный,
#  то есть каждый элемент должен иметь один и тот же тип данных.
#  Например, в heights_arr мы записали все высоты целыми числами;
#  таким образом, каждый элемент хранится как целое число в массиве.
#  Чтобы проверить тип данных, используйте numpy.ndarray.dtype
# import numpy as np
#
# heights = [189, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183,
#            193, 178, 173, 174, 183, 183, 180, 168, 180, 170, 178, 182, 180, 183, 178,
#            182, 188, 175, 179, 183, 193, 182, 183, 177, 185, 188, 188, 182, 185, 191]
#
# heights_arr = np.array(heights)
# print(heights_arr.dtype)
# TODO: Если мы смешаем число с плавающей запятой, скажем, первый элемент будет 189,0 вместо 189:
# heights_float = [189.0, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183,
#                  193, 178, 173, 174, 183, 183, 180, 168, 180, 170, 178, 182, 180, 183, 178,
#                  182, 188, 175, 179, 183, 193, 182, 183, 177, 185, 188, 188, 182, 185, 191]
# TODO: Затем, после преобразования списка в массив, мы увидим,
#  что все остальные числа преобразуются в числа с плавающей запятой:
# import numpy as np
# heights_float = [189.0, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183,
#                  193, 178, 173, 174, 183, 183, 180, 168, 180, 170, 178, 182, 180, 183, 178,
#                  182, 188, 175, 179, 183, 193, 182, 183, 177, 185, 188, 188, 182, 185, 191]
#
# heights_float_arr = np.array(heights_float)
# print(heights_float_arr)
# print("\n")
# print(heights_float_arr.dtype)
# TODO: Numpy поддерживает несколько типов данных, таких как:
#  - int (целое число),
#  - float (числовое число с плавающей запятой)
#  - bool (логические значения, True и False).
#  Число после типа данных, например. int64 представляет разрядность типа данных.

# TODO: Indexing (Индексация)
#  Мы можем использовать индексацию массива для выбора отдельных элементов из массивов.
#  Как и списки Python, индекс numpy начинается с 0.
#  Чтобы получить доступ к высоте 3-го президента Томаса Джефферсона в 1darray 'heights_arr':
# import numpy as np
#
# heights = [189, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183,
#            193, 178, 173, 174, 183, 183, 180, 168, 180, 170, 178, 182, 180, 183, 178,
#            182, 188, 175, 179, 183, 193, 182, 183, 177, 185, 188, 188, 182, 185, 191]
#
# heights_arr = np.array(heights)
# print(heights_arr[2])
# TODO: В 2darray есть две оси, ось 0 и 1.
#  Ось 0 проходит вниз по строкам, тогда как ось 1 проходит горизонтально по столбцам.
#  Напомним, что в 2dary heights_and_ages_arr его размеры равны (2, 45).
#  Чтобы найти возраст Томаса Джефферсона в начале его президентства,
#  вам нужно получить доступ ко второй строке, где хранится возраст:
# import numpy as np
#
# heights = [189, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183,
#            193, 178, 173, 174, 183, 183, 180, 168, 180, 170, 178, 182, 180, 183, 178,
#            182, 188, 175, 179, 183, 193, 182, 183, 177, 185, 188, 188, 182, 185, 191]
#
# ages = [57, 61, 57, 57, 58, 57, 61, 54, 68, 51, 49, 64, 50, 48, 65, 52, 56, 46, 54, 49, 51, 47, 55,
#         55, 54, 42, 51, 56, 55, 51, 54, 51, 60, 62, 43, 55, 56, 61, 52, 69, 64, 46, 54, 47, 70]
#
# heights_and_ages = heights + ages
# heights_and_ages_arr = np.array(heights_and_ages)
# heights_and_ages_arr = heights_and_ages_arr.reshape((2, 45))
# print(heights_and_ages_arr[1, 2])
# TODO: В 2darray строка — это ось 0, а столбец — ось 1,
#  поэтому для доступа к 2darray numpy сначала ищет позицию в строках, а затем в столбцах.
#  Итак, в нашем примере heights_and_ages_arr[1,2] мы обращаемся к строке 2 (возраст),
#  столбцу 3 (третий президент), чтобы найти возраст Томаса Джефферсона.

# TODO: Slicing (Нарезка)
#  Что, если мы хотим проверить первые три элемента из первой строки в 2darray?
#  Мы используем «:», чтобы выбрать все элементы из индекса до конечного индекса, но не включая его.
#  Это называется нарезка
# import numpy as np
# heights = [189, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183,
#            193, 178, 173, 174, 183, 183, 180, 168, 180, 170, 178, 182, 180, 183, 178,
#            182, 188, 175, 179, 183, 193, 182, 183, 177, 185, 188, 188, 182, 185, 191]
#
# ages = [57, 61, 57, 57, 58, 57, 61, 54, 68, 51, 49, 64, 50, 48, 65, 52, 56, 46, 54, 49, 51, 47, 55,
#         55, 54, 42, 51, 56, 55, 51, 54, 51, 60, 62, 43, 55, 56, 61, 52, 69, 64, 46, 54, 47, 70]
#
# heights_and_ages = heights + ages
# heights_and_ages_arr = np.array(heights_and_ages)
# heights_and_ages_arr = heights_and_ages_arr.reshape((2, 45))
# print(heights_and_ages_arr[0, 0:3])
# TODO: Когда начальный индекс равен 0, мы можем его опустить, как показано ниже:
# import numpy as np
# heights = [189, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183,
#            193, 178, 173, 174, 183, 183, 180, 168, 180, 170, 178, 182, 180, 183, 178,
#            182, 188, 175, 179, 183, 193, 182, 183, 177, 185, 188, 188, 182, 185, 191]
#
# ages = [57, 61, 57, 57, 58, 57, 61, 54, 68, 51, 49, 64, 50, 48, 65, 52, 56, 46, 54, 49, 51, 47, 55,
#         55, 54, 42, 51, 56, 55, 51, 54, 51, 60, 62, 43, 55, 56, 61, 52, 69, 64, 46, 54, 47, 70]
#
# heights_and_ages = heights + ages
# heights_and_ages_arr = np.array(heights_and_ages)
# heights_and_ages_arr = heights_and_ages_arr.reshape((2, 45))
# print(heights_and_ages_arr[0, :3])
# TODO: Что, если мы хотим увидеть весь четвертый столбец? Укажите это, используя «:», как показано ниже.
# import numpy as np
# heights = [189, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183,
#            193, 178, 173, 174, 183, 183, 180, 168, 180, 170, 178, 182, 180, 183, 178,
#            182, 188, 175, 179, 183, 193, 182, 183, 177, 185, 188, 188, 182, 185, 191]
#
# ages = [57, 61, 57, 57, 58, 57, 61, 54, 68, 51, 49, 64, 50, 48, 65, 52, 56, 46, 54, 49, 51, 47, 55,
#         55, 54, 42, 51, 56, 55, 51, 54, 51, 60, 62, 43, 55, 56, 61, 52, 69, 64, 46, 54, 47, 70]
#
# heights_and_ages = heights + ages
# heights_and_ages_arr = np.array(heights_and_ages)
# heights_and_ages_arr = heights_and_ages_arr.reshape((2, 45))
# print(heights_and_ages_arr[:, 3])
# TODO: Синтаксис срезов Numpy соответствует синтаксису списка Python: arr[start:stop:step].
#  Если какой-либо из них не указан, по умолчанию используются значения start=0, stop=размер измерения, step=1.

# TODO: Assigning Single Values (Присвоение отдельных значений)
#  Иногда вам нужно изменить значения определенных элементов в массиве.
#  Например, мы заметили, что четвертая запись в heights_arr была неверной,
#  она должна быть 165 вместо 163, мы можем переназначить правильный номер:
# import numpy as np
#
# heights = [189, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183,
#            193, 178, 173, 174, 183, 183, 180, 168, 180, 170, 178, 182, 180, 183, 178,
#            182, 188, 175, 179, 183, 193, 182, 183, 177, 185, 188, 188, 182, 185, 191]
#
# heights_arr = np.array(heights)
# heights_arr[3] = 165
# print(heights_arr)
# TODO: В 2darray можно легко назначить отдельные значения.
#  Вы можете использовать индексацию для одного элемента.
#  Например, измените четвертую запись в heights_arr на 165:
# import numpy as np
#
# heights = [189, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183,
#            193, 178, 173, 174, 183, 183, 180, 168, 180, 170, 178, 182, 180, 183, 178,
#            182, 188, 175, 179, 183, 193, 182, 183, 177, 185, 188, 188, 182, 185, 191]
#
# ages = [57, 61, 57, 57, 58, 57, 61, 54, 68, 51, 49, 64, 50, 48, 65, 52, 56, 46, 54, 49, 51, 47, 55,
#         55, 54, 42, 51, 56, 55, 51, 54, 51, 60, 62, 43, 55, 56, 61, 52, 69, 64, 46, 54, 47, 70]
#
# heights_and_ages = heights + ages
# heights_and_ages_arr = np.array(heights_and_ages)
# heights_and_ages_arr = heights_and_ages_arr.reshape((2, 45))
# heights_and_ages_arr[0, 3] = 165
# print(heights_and_ages_arr)
# TODO: Или мы можем использовать нарезку для нескольких элементов.
#  Например, чтобы заменить первую строку ее средним значением 180 в heights_and_ages_arr:
# import numpy as np
#
# heights = [189, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183,
#            193, 178, 173, 174, 183, 183, 180, 168, 180, 170, 178, 182, 180, 183, 178,
#            182, 188, 175, 179, 183, 193, 182, 183, 177, 185, 188, 188, 182, 185, 191]
#
# ages = [57, 61, 57, 57, 58, 57, 61, 54, 68, 51, 49, 64, 50, 48, 65, 52, 56, 46, 54, 49, 51, 47, 55,
#         55, 54, 42, 51, 56, 55, 51, 54, 51, 60, 62, 43, 55, 56, 61, 52, 69, 64, 46, 54, 47, 70]
#
# heights_and_ages = heights + ages
# heights_and_ages_arr = np.array(heights_and_ages)
# heights_and_ages_arr = heights_and_ages_arr.reshape((2, 45))
#
# heights_and_ages_arr[0, :] = 180
# print(heights_and_ages_arr)
# TODO: Мы также можем комбинировать нарезку, чтобы изменить любое подмножество массива.
#  Например, чтобы переназначить 0 в левый верхний угол:
# import numpy as np
#
# heights = [189, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183,
#            193, 178, 173, 174, 183, 183, 180, 168, 180, 170, 178, 182, 180, 183, 178,
#            182, 188, 175, 179, 183, 193, 182, 183, 177, 185, 188, 188, 182, 185, 191]
#
# ages = [57, 61, 57, 57, 58, 57, 61, 54, 68, 51, 49, 64, 50, 48, 65, 52, 56, 46, 54, 49, 51, 47, 55,
#         55, 54, 42, 51, 56, 55, 51, 54, 51, 60, 62, 43, 55, 56, 61, 52, 69, 64, 46, 54, 47, 70]
#
# heights_and_ages = heights + ages
# heights_and_ages_arr = np.array(heights_and_ages)
# heights_and_ages_arr = heights_and_ages_arr.reshape((2, 45))
#
# heights_and_ages_arr[:, :2] = 0
# print(heights_and_ages_arr)
# TODO: Легко обновлять значения в подмассиве, когда вы объединяете массивы с нарезкой.
#  Чтобы узнать больше о базовой нарезке и расширенной индексации в numpy, перейдите по этой ссылке:
#  https://numpy.org/doc/stable/reference/arrays.indexing.html

# TODO: ЗАДАЧА: Assigning Single Values (Присвоение отдельных значений)
#  Замените значение во второй строке и третьем столбце массива heights_and_ages_arr на 2.
# heights_and_ages_arr[1, 2] = 2

# TODO: Assigning an Array to an Array (Назначение массива массиву)
#  Кроме того, 1darray или 2darry могут быть назначены подмножеству другого 2darray, если их формы совпадают.
#  Вспомним 2darray heights_and_ages_arr:
# import numpy as np
#
# heights = [189, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183,
#            193, 178, 173, 174, 183, 183, 180, 168, 180, 170, 178, 182, 180, 183, 178,
#            182, 188, 175, 179, 183, 193, 182, 183, 177, 185, 188, 188, 182, 185, 191]
#
# ages = [57, 61, 57, 57, 58, 57, 61, 54, 68, 51, 49, 64, 50, 48, 65, 52, 56, 46, 54, 49, 51, 47, 55,
#         55, 54, 42, 51, 56, 55, 51, 54, 51, 60, 62, 43, 55, 56, 61, 52, 69, 64, 46, 54, 47, 70]
#
# heights_and_ages = heights + ages
# heights_and_ages_arr = np.array(heights_and_ages)
# heights_and_ages_arr = heights_and_ages_arr.reshape((2, 45))
# print(heights_and_ages_arr)
# TODO: Если мы хотим обновить рост и возраст первого президента новыми данными,
#  мы можем предоставить данные в виде списка:
# import numpy as np
#
# heights = [189, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183,
#            193, 178, 173, 174, 183, 183, 180, 168, 180, 170, 178, 182, 180, 183, 178,
#            182, 188, 175, 179, 183, 193, 182, 183, 177, 185, 188, 188, 182, 185, 191]
#
# ages = [57, 61, 57, 57, 58, 57, 61, 54, 68, 51, 49, 64, 50, 48, 65, 52, 56, 46, 54, 49, 51, 47, 55,
#         55, 54, 42, 51, 56, 55, 51, 54, 51, 60, 62, 43, 55, 56, 61, 52, 69, 64, 46, 54, 47, 70]
#
# heights_and_ages = heights + ages
# heights_and_ages_arr = np.array(heights_and_ages)
# heights_and_ages_arr = heights_and_ages_arr.reshape((2, 45))
#
# heights_and_ages_arr[:, 0] = [190, 58]
# print(heights_and_ages_arr)
# TODO: Мы также можем обновить данные в подмассиве с помощью массива numpy как такового:
# import numpy as np
#
# heights = [189, 170, 189, 163, 183, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183,
#            193, 178, 173, 174, 183, 183, 180, 168, 180, 170, 178, 182, 180, 183, 178,
#            182, 188, 175, 179, 183, 193, 182, 183, 177, 185, 188, 188, 182, 185, 191]
#
# ages = [57, 61, 57, 57, 58, 57, 61, 54, 68, 51, 49, 64, 50, 48, 65, 52, 56, 46, 54, 49, 51, 47, 55,
#         55, 54, 42, 51, 56, 55, 51, 54, 51, 60, 62, 43, 55, 56, 61, 52, 69, 64, 46, 54, 47, 70]
#
# heights_and_ages = heights + ages
# heights_and_ages_arr = np.array(heights_and_ages)
# heights_and_ages_arr = heights_and_ages_arr.reshape((2, 45))
#
# new_record = np.array([[180, 183, 190], [54, 50, 69]])
# heights_and_ages_arr[:, 42:] = new_record
# print(heights_and_ages_arr)
# TODO: Обратите внимание, что значения последних трех столбцов изменились.
#  Обновление многомерного массива новой записью в numpy выполняется просто, если их формы совпадают.
