# TODO: Python for Finance (Python для финансов)
#  В Python есть множество пакетов, особенно полезных при работе с финансовыми данными.
#  В этом курсе мы узнаем, как Python можно использовать в финансах для решения различных проблем и проведения
#  финансового анализа. Кроме того, в качестве практического проекта мы создадим программу для анализа цены биткойнов!

# TODO: Welcome (Добро пожаловать)
#  Умение программировать действительно полезно для многих дисциплин, включая финансы.
#  С его помощью можно легко получать финансовые данные, рассчитывать метрики, генерировать отчеты,
#  автоматизировать различные задачи и проводить финансовый анализ.
#  В этом курсе мы узнаем, как Python можно использовать в финансах для решения различных финансовых проблем.
#  В качестве предварительного условия для этого курса мы ожидаем, что вы знаете основы финансов.
#  Мы также рассмотрим различные концепции Python, прежде чем показать их в действии.

# TODO: Why Python (Почему Python)
#  Python — один из самых популярных языков программирования в мире,
#  так как он прост в освоении и имеет простой синтаксис.
#  Например, вот код, используемый для вычисления и вывода результата умножения 123 на 456:
# print(123 * 456)

# TODO: Output (Выход)
#  Оператор печати используется для генерации вывода.
#  Это может быть число, текст или результат вычисления:
#  За оператором печати всегда следуют круглые скобки, содержащие вывод, который мы хотим сгенерировать.
# print(42)

# TODO: Printing Text (Печать текста)
#  При печати текста его необходимо заключать в одинарные или двойные кавычки.
#  Текст в кавычках называется строкой.
#  Кавычки, окружающие текст, должны быть одинаковыми: либо одинарными, либо двойными.
# print("Python is cool")

# TODO: Обратите внимание, что оператор печати заключает текст, который мы хотим вывести, в круглые скобки.
#  Всегда не забывайте закрывать открытые скобки — без них оператор печати не будет работать.
# print("Welcome")

# TODO: Projects (Проекты)
#  В ходе этого курса мы изучим основы Python, используя его для решения нескольких
#  реальных финансовых проблем и выполнения расчетов.
#  Вот некоторые из проектов, которые мы рассмотрим:
#  - Расчет основных финансовых показателей
#  - Построение графиков на основе финансовых данных
#  - Получение и анализ цен на акции
#  - Выполнение финансового анализа акций и портфелей, включая доходность акций, корреляции, анализ рисков
#  - Оптимизация портфеля с использованием моделирования Монте-Карло
#  В качестве практического проекта мы создадим программу для анализа цены биткойнов!
#  Навыки, полученные в ходе этого курса, могут быть использованы для решения множества различных финансовых проблем,
#  создания отчетов и помощи в принятии решений.

# TODO: ЗАДАЧА: Начиная
#  Давайте практиковаться, кодируя по-настоящему!
#  Мы начнем с простого вывода текста, чтобы познакомить вас со средой Code Playground,
#  чтобы вы могли написать свой первый настоящий код.
#  Задание Исправьте программу для вывода цитаты:
#  Инвестиции в знания окупаются с наибольшей выгодой.
# print('An investment in knowledge pays the best interest.')

# TODO: Simple Operations (Простые операции)
#  Python также может выполнять вычисления. Мы можем ввести его прямо в оператор печати,
#  например:
# print(2 + 2)
# print(5 + 4 - 3)

# TODO: Multiplication (Умножение)
#  Умножение выполняется с помощью символа звездочки * :
# print(12 * 64)

# TODO: Division (Разделение)
#  Деление осуществляется с помощью косой черты:
#  Использование одной косой черты для деления чисел всегда дает десятичное число (или число с плавающей запятой,
#  как это называется в программировании), даже если результатом является целое число.
# print(100 / 2)

# TODO: Simple Operations (Простые операции)
#  Как и в обычной математике, мы можем использовать круглые скобки, чтобы указать операции, которые мы хотим
#  выполнить в первую очередь (но нам все еще нужно включить те, которые находятся вокруг оператора!).
#  Как это: Не забудьте закрыть все открывающие скобки соответствующими закрывающими скобками.
# print(2 * (3 + 4))

# TODO: Simple Operations (Простые операции)
#  Одна из замечательных особенностей Python заключается в том, что он может выполнять операции с
#  действительно большими числами. Например, посчитаем 123456789 умножить на 12345:
# print(123456789 * 12345)

# TODO: Exponentiation (Возведение в степень)
#  Две звездочки ** используются для возведения числа в степень другого, что называется возведением в степень.
#  Например:
# print(2 ** 5)

# TODO: Inflation (Инфляция)
#  Нам нужно рассчитать, сколько будет стоить вещь стоимостью 8000 долларов сегодня через 10 лет, если
#  годовой уровень инфляции составит 5%. Подсказка: используйте следующую формулу для расчета будущей стоимости:
#  текущая стоимость * (1+уровень инфляции) ** годы.
#  Обратите внимание, что уровень инфляции должен быть выражен в виде десятичной дроби,
#  поэтому 5% соответствует значению 0,05 . Напишите программу для расчета и выведите результат.
#  Используйте формулу в операторе печати с заданными значениями.
# print(8000 * (1 + 0.05) ** 10)

# TODO: Variables (Переменные)
#  Переменная позволяет хранить значение, присваивая ему имя.
#  Имя можно использовать для ссылки на значение позже в программе.
#  Например, вы можете использовать переменную для хранения цены акции и выполнения с ней различных расчетов.
#  Чтобы присвоить переменную, используйте один знак равенства.
#  В приведенном ниже примере мы присвоили значение 412.8 переменной с именем price.
# price = 412.8

# TODO: Working with Variables (Работа с переменными)
#  Итак, вы получили свою переменную и назвали ее.
#  Теперь вы можете использовать её для выполнения соответствующих операций точно так же, как с числами и строками,
#  например:
# price = 412.8
#
# print(price * 2)
# print(price / 2)

# TODO: Operators (Операторы)
#  У вас может быть несколько переменных.
#  Давайте используем две переменные с именами x и y для выполнения всех распространенных числовых операций в Python:
#  Python позволяет выполнять вычисления с действительно большими числами!
#  Попробуйте изменить код, чтобы использовать два очень больших числа для x и y.
# x = 9
# y = 5
#
# # multiplication
# print(x * y)
#
# # division
# print(x / y)
#
# # exponentiation: raise one number to the power of another
# print(x ** y)
#
# # Quotient: the quantity produced by the division of two numbers.
# print(x // y)
#
# # remainder
# print(x % y)

# TODO: Variables (Переменные)
#  Переменные можно переназначать сколько угодно раз, например:
# x = 8
# print(x)
# x = 41
# print(x + 1)

# TODO: Variable Names (Имена переменных)
#  Именование ваших переменных довольно гибкое. Вы можете использовать буквы, цифры и символы подчеркивания в именах
#  переменных, однако вы не можете использовать специальные символы или начинать имя с цифры.
#  Помните, что Python — это язык, чувствительный к регистру.
#  Это означает, что Lastname и lastname — это два разных имени переменной.

# TODO: ЗАДАЧА: Коэффициент цена/прибыль
#  Нам нужно рассчитать и вывести соотношение цены и прибыли (P/E) компании.
#  P/E — это цена акций компании, деленная на EPS (прибыль на акцию).
#  Цена акций компании и средняя прибыль на акцию за последние 12 месяцев хранятся в соответствующих переменных.
#  Используйте эти значения, чтобы рассчитать соотношение P/E для компании,
#  сохраните его в переменной с именем pe и выведите его значение.
#  Сначала определите переменную с именем pe, назначьте ей формулу соотношения цена/прибыль,
#  а затем используйте ее в операторе печати.
# price = 160.8
# eps = 3.42
# pe = price / eps
# print(pe)

# TODO: Arrays (Массивы)
#  В финансах мы в основном имеем дело с несколькими значениями,
#  такими как ежедневные цены на акции, цены на жилье и т.д.
#  Вместо объявления отдельных переменных для каждого значения мы можем использовать массив!
#  Массив позволяет хранить несколько значений в одной переменной.
#  Например, объявим массив цен:
#  Как видите, массив присваивается переменной, которая хранит несколько значений.
#  Элементы массива разделяются запятыми.
# prices = [42.8, 102.03, 240.38, 80.9]
# print(prices)

# TODO: Arrays (Массивы)
#  Если вы хотите получить доступ к определенному элементу в массиве, вы можете сделать это,
#  используя его индекс в квадратных скобках. В нашем примере это будет выглядеть так:
#  Индекс первого элемента списка равен 0, а не 1, как можно было ожидать.
# prices = [42.8, 102.03, 240.38, 80.9]
#
# print(prices[0])
# print(prices[1])
# print(prices[2])

# TODO: Arrays (Массивы)
#  Вы можете использовать значения массива в вычислениях.
#  Например, добавим первые два элемента и выведем результат:
#  Мы сохранили результат в переменной res и использовали ее в выводе.
# prices = [42.8, 102.03, 240.38, 80.9]
#
# res = prices[0] + prices[1]
# print(res)

# TODO: Arrays (Массивы)
#  Python имеет много полезных функций.
#  Например, функция max позволяет найти наибольшее значение в массиве:
#  Обратите внимание, что нам нужны круглые скобки после ключевого слова max вокруг массива цен.
#  Мы узнаем больше о функции в следующем модуле.
# prices = [42.8, 102.03, 240.38, 80.9]
# print(max(prices))

# TODO: Arrays (Массивы)
#  Точно так же функцию min можно использовать для поиска наименьшего значения в массиве:
# prices = [42.8, 102.03, 240.38, 80.9]
# print(min(prices))

# TODO: Arrays (Массивы)
#  В качестве примера программы давайте найдем среднее значение массива.
#  Среднее значение представляет собой сумму всех значений, деленную на их количество.
#  Мы можем найти сумму всех значений с помощью функции sum() и их количество с помощью len():
#  Приведенный ниже код вычисляет и выводит среднее значение массива цен.
#  О многих других полезных и продвинутых функциях мы узнаем в следующем модуле.
# prices = [42.8, 102.03, 240.38, 80.9]
# res = sum(prices) / len(prices)
# print(res)

# TODO: ЗАДАЧА: Average Revenue (Средний доход)
#  Данный код объявляет массив, в котором хранятся ежемесячные доходы компании за 12 месяцев.
#  Каждое значение соответствует месяцу, первое значение — январь, второе — февраль и т.д.
#  Вам необходимо рассчитать и вывести среднемесячный доход компании за этот год.
#  Подсказка: используйте функцию sum(),
#  чтобы вычислить сумму всех значений массива и разделить ее на количество значений.
# revenue = [125000, 200000, 150000, 175000, 162000, 120000, 98000, 105400, 198000, 202500, 97000, 220500]
# res = sum(revenue) / len(revenue)
# print(res)

# TODO: Function (Функция)
#  Важным понятием в программировании являются функции.
#  Функция — это группа связанных операторов, которая выполняет определенную задачу.
#  Например, функция печати, которую мы видели, используется для генерации вывода:
# print("Hello")

# TODO: Functions (Функции)
#  Слова перед скобками - это имена функций,
#  а значения внутри скобок - аргументы функции (также называемые параметрами).
#  В нашем примере print — это имя функции, а «Hello» — ее аргумент.
# print("Hello")

# TODO: Arguments (Аргументы)
#  Мы видели функции в действии в предыдущем модуле при вычислении минимума/максимума/суммы массива.
#  Функция также может иметь несколько аргументов, которые должны быть разделены запятыми.
#  Например:
#  Функцию max() также можно использовать для нахождения максимального значения из ее аргументов.
# x = max(4, 8, 1)
# print(x)

# TODO: Function (Функция)
#  Чтобы использовать функцию в нашем коде, нам нужно "вызвать" ее.
#  Вы вызываете функцию, используя ее имя, за которым следуют круглые скобки, заключающие аргументы.
#  Например, мы вызываем функцию печати со строковым аргументом для генерации вывода:
# print("some text")

# TODO: Functions (Функции)
#  В некоторых ситуациях нам нужно создать собственную функцию и использовать ее в нашем коде.
#  Это можно сделать с помощью ключевого слова def.
#  Вот пример функции с именем avg(), которая вычисляет и выводит среднее значение своего массива аргументов:
#  Обратите внимание на двоеточие: после имени функции. Это обязательная часть синтаксиса.
# def avg(x):
#     res = sum(x) / len(x)
#     print(res)
#
#
# a = [1, 2, 3, 4, 5, 6, 7, 8, 10]
# avg(a)

# TODO: Functions (Функции)
#  Теперь мы можем вызвать нашу функцию для любого массива в нашем коде и увидеть результат:
#  Python использует отступы white tab at the beginning of a line
#  (белая вкладка в начале строки) для разделения блоков кода.
#  В зависимости от логики программы отступ может быть обязательным.
#  Как видите, код внутри функции должен иметь отступ.
# def avg(x):
#     res = sum(x) / len(x)
#     print(res)
#
#
# prices = [42.8, 102.03, 240.38, 80.9]
# avg(prices)

# TODO: Functions (Функции)
#  Мы можем вызывать нашу функцию avg() столько раз, сколько захотим, с разными аргументами:
# def avg(x):
#     res = sum(x) / len(x)
#     print(res)
#
#
# prices = [42.8, 102.03, 240.38, 80.9]
# avg(prices)
#
# x = [1, 2, 3, 4, 5]
# avg(x)

# TODO: Functions (Функции)
#  В нашем примере функция использовала print для вывода результата.
#  В некоторых ситуациях нам нужно иметь возможность присваивать и использовать значение нашей функции.
#  Для этого вместо print мы можем использовать ключевое слово return в нашей функции:
# def avg(x):
#     res = sum(x) / len(x)
#     return res
# TODO: Это позволяет нам сделать следующее:
# def avg(x):
#     res = sum(x) / len(x)
#     return res
#
#
# prices = [42.8, 102.03, 240.38, 80.9]
# a = avg(prices)
# print(a)

# TODO: ЗАДАЧА: Median Value (Среднее значение)
#  Вам дан список цен на дома в районе, отсортированный в порядке возрастания.
#  В списке нечетное количество домов.
#  Создайте функцию, которая вычисляет и возвращает среднюю цену дома.
#  Данный код определяет и вызывает функцию с именем "median()".
#  Завершите его определение, чтобы вычислить и вернуть медианное значение массива аргументов.
#  Подсказка: Поскольку количество домов нечетное, мы можем взять средний элемент массива,
#  который будет представлять медианное значение.
#  Для этого разделите количество элементов в массиве на 2. В результате получится индекс среднего элемента,
#  например:
#      index = len(arr) // 2
#      return arr[index]
#  Обратите внимание, что нам нужно использовать оператор //,
#  который представляет собой деление на пол, в результате чего получается целое число.
# prices = [75000, 95000, 98000, 109000, 135500, 185000, 199000, 249000, 255000, 280000, 299000, 330000, 380000]
#
#
# def median(arr):
#     index = len(arr) // 2
#     return arr[index]
#
#
# res = median(prices)
# print(res)

# TODO: Packages (Пакеты)
#  Одним из преимуществ Python является наличие множества пакетов, которые вы можете использовать.
#  Пакеты содержат функции, которые вы можете импортировать и использовать в своем коде для выполнения различных
#  расчетов и задач, таких как расчет внутренних коэффициентов доходности, сложных процентов и многого другого.
#  Давайте узнаем о пакетах!
#  В качестве примера возьмем пакет math, который используется для математических вычислений.
#  Чтобы использовать пакет, нам сначала нужно импортировать его в наш код. Это делается с помощью оператора импорта:
#      import math as m
#  Это импортирует математический модуль под именем m.
#  Мы можем назвать пакет как угодно. Это удобно, так как мы можем давать более короткие имена длинным именам пакетов.

# TODO: Packages (Пакеты)
#  Как только мы импортируем пакет, мы можем использовать его функции!
#  Чтобы вызвать функцию из пакета, нам нужно использовать:
#  имя пакета, точку и имя функции, которую мы хотим использовать.
#  Например, воспользуемся функцией sqrt() из пакета math для вывода квадратного корня из 4096:
# import math as m
#
# x = m.sqrt(4096)
# print(x)

# TODO: Numpy (числовой Python)
#  Еще один полезный пакет — NumPy, что означает числовой Python.
#  NumPy очень популярен благодаря включению в него функций для работы с числовыми данными.
#  np — наиболее распространенное имя, используемое для импорта numpy.
#  Начнем с импорта пакета:
#      import numpy as np

# TODO: Numpy (числовой Python)
#  Теперь мы можем использовать функции NumPy для выполнения операций с массивами.
#  Например, функция mean() вычисляет среднее значение массива:
#  Обратите внимание на синтаксис вызова функции:
#  он начинается с имени пакета, точки, а затем имени функции и аргументов.
# import numpy as np
#
# prices = [42.8, 102.03, 240.38, 80.9]
# print(np.mean(prices))

# TODO: Numpy (числовой Python)
#  Вот некоторые популярные функции Numpy:
#      mean - возвращает среднее значение массива
#      std - возвращает стандартное отклонение
#      sum - возвращает сумму всех значений
#      max - возвращает максимальное значение
#  Массивы NumPy позволяют легко и эффективно выполнять вычисления.
# import numpy as np
#
# prices = [42.8, 102.03, 240.38, 80.9]
#
# print(np.mean(prices))
# print(np.std(prices))
# print(np.sum(prices))
# print(np.max(prices))

# TODO: ЗАДАЧА: Standard Deviation (Стандартное отклонение)
#  Стандартное отклонение — это мера того, насколько разбросаны числа.
#  Вам дан массив цен на жилье, и вам нужно рассчитать стандартное отклонение цен.
#  Импортируйте правильный пакет и используйте соответствующую функцию,
#  чтобы вычислить стандартное отклонение массива и вывести его с помощью оператора печати.
# import numpy as np
#
# prices = [75000, 95000, 98000, 109000, 135500, 185000, 199000, 249000, 255000, 280000, 299000, 330000, 380000]
# print(np.std(prices))

# TODO: Numpy Financial (Финансовый числовой Python)
#  Время для финансовых пакетов!
#  Пакет Numpy Financial, созданный на основе NumPy, включает множество полезных финансовых функций.
#  Чтобы использовать их, нам сначала нужно импортировать пакет:
#      import numpy_financial as npf
#  npf — это обычно используемая аббревиатура, используемая при импорте пакета.

# TODO: Numpy Financial (Финансовый числовой Python)
#  Давайте посмотрим на функции, которые он предоставляет.
#  Функция fv() вычисляет будущую стоимость инвестиций.
#  Предположим, вы инвестируете 1000 долларов на 5 лет с годовой доходностью 8%.
#  Нам нужно рассчитать, сколько наши инвестиции будут стоить через 5 лет.
#  Процентная ставка представлена в виде десятичной дроби, где 1 представляет 100%, таким образом, 0.08 соответствует 8%
#      nper – количество периодов.
#      pmt - соответствует периодическим платежам/инвестициям, что в нашем случае равно 0.
#      pv — это текущая стоимость, которая в нашем случае представляет собой инвестиции в размере 1000 долларов,
#  поэтому знак минус.
# import numpy_financial as npf
#
# res = npf.fv(rate=0.08, nper=5, pmt=0, pv=-1000)
# print(res)

# TODO: Present Value (Приведенная стоимость)
#  Точно так же функция pv() используется для расчета приведенной стоимости инвестиций.
#  Например, давайте рассчитаем текущую стоимость инвестиции,
#  которая должна составить 1000 за 8 лет при годовой процентной ставке 10%:
#  Результатом кода будет сумма, которую вам нужно инвестировать сегодня, чтобы достичь 1000 через 8 лет.
# import numpy_financial as npf
#
# res = npf.pv(rate=0.10, nper=8, pmt=0, fv=1000)
# print(res)

# TODO: Monthly Loan Payments (Ежемесячные платежи по кредиту)
#  Функция pmt() используется для расчета платежа по основной сумме кредита плюс проценты.
#  Допустим, мы хотим рассчитать, сколько мы должны платить ежемесячно, чтобы погасить кредит в 100 000 через 5 лет.
#  Годовая процентная ставка составляет 7% и рассчитывается ежемесячно.
#  Поскольку нам нужно рассчитать ежемесячные платежи, мы устанавливаем ставку и периоды (nper) в месяцах.
#  Параметр pv показывает текущую стоимость кредита,
#  а параметр fv показывает будущую стоимость, которую мы хотим получить.
#  Запустите код, чтобы увидеть результирующую сумму ежемесячных платежей.
#  Этот метод можно использовать, например, для расчета платежей по ипотеке.
# import numpy_financial as npf
#
# res = npf.pmt(rate=0.07 / 12, nper=5 * 12, pv=100000, fv=0)
# print(res)

# TODO: pmt() - функция расчета платежа по основной сумме кредита плюс проценты
#  Обратите внимание, что помимо расчета ежемесячного платежа по ипотеке, функция pmt() может использоваться
#  для возврата периодического депозита,
#  необходимого для достижения определенного будущего баланса с заданной процентной ставкой.
#  Например:
#  Код вернет ежемесячные депозиты, необходимые для достижения 50000 за 5 лет, с годовой процентной ставкой 10%.
#  Попробуйте написать программу, которая вычисляет, сколько вам нужно откладывать ежегодно,
#  чтобы получить желаемые пенсионные накопления.
# import numpy_financial as npf
#
# res = npf.pmt(rate=0.10 / 12, nper=5 * 12, pv=0, fv=50000)
# print(res)

# import numpy_financial as npf
#
# res = npf.pmt(rate=0.07, nper=2, pv=0, fv=100000)
# print(res)

# TODO: pmt()
#  Cколько вам нужно экономить ежегодно, чтобы получить 100000 сбережений за 30 лет.
#  Процентная ставка составляет 3%.
# import numpy_financial as npf
#
# res = npf.pmt(rate=0.03, nper=30, pv=0, fv=100000)
# print(res)

# TODO: Mortgage Payments (Платежи по ипотечным кредитам)
#  Вам необходимо рассчитать ежемесячные платежи по кредиту в размере 500 000 долларов США в течение 30 лет.
#  Годовая процентная ставка составляет 4%, проценты начисляются ежемесячно.
#  Напишите программу для вычисления и вывода результата.
#  Подсказка: используйте функцию pmt() пакета NumPy Financial.
#  Он имеет следующий синтаксис:
#      pmt(rate, nper, pv, fv)
#  Обратите внимание, что ваша будущая стоимость (fv) должна быть равна 0, а текущая стоимость (pv) — 500 000.
#  Помните, что аргументы nper и rate должны быть месячными, то есть ставка должна быть разделена на 12,
#  а период nper должен быть в месяцах (годы * 12).
# import numpy_financial as npf
#
# res = npf.pmt(rate=0.04 / 12, nper=30 * 12, pv=500000, fv=0)
# print(res)

# TODO: IRR
#  В Numpy Financial есть функция irr(), используемая для расчета IRR (внутренняя норма доходности).
#  Предположим, мы вложили 5000 и получили следующие платежи: 500, 700, 1000, 3000.
#  Чтобы рассчитать IRR, нам сначала нужно объявить массив со значениями,
#  где первое значение — это наша первоначальная инвестиция:
#      cashflow = [-5000, 500, 700, 1000, 3000]
#  Теперь мы можем использовать функцию irr():
#  Это позволит рассчитать внутреннюю норму доходности.
# import numpy_financial as npf
#
# cashflow = [-5000, 500, 700, 1000, 3000]
# print(npf.irr(cashflow))

# TODO: Comparing IRR (Сравнение внутренней нормы доходности)
#  Давайте воспользуемся функцией irr(), чтобы сравнить две инвестиционные возможности и решить, какая из них лучше.
#  Вариант 1: Требуются 50 000 инвестиций
#  Будут выплачивать 10 000, 25 000, 25 000, 35 000, 42 000 каждый год в течение следующих 5 лет.
#  Вариант 2: Требуются 30 000 инвестиций
#  Будут платить 10 000, 13 000, 18 000, 25 000, 20 000 каждый год в течение следующих 5 лет.
#  Сначала создадим соответствующие массивы:
#  Обратите внимание, что первые значения массивов — это суммы инвестиций, поэтому они отрицательные.
#      cf1 = [-50000, 10000, 25000, 25000, 35000, 42000]
#      cf2 = [-30000, 10000, 13000, 18000, 25000, 20000]
#  Сравнение внутренней нормы доходности
#  Давайте выведем IRR для каждой инвестиции и сравним:
#  Запустите код, чтобы увидеть, какой вариант имеет лучшую IRR.
# import numpy_financial as npf
#
# cf1 = [-50000, 10000, 25000, 25000, 35000, 42000]
# cf2 = [-30000, 10000, 13000, 18000, 25000, 20000]
#
# print("Option 1: ", npf.irr(cf1))
# print("Option 2: ", npf.irr(cf2))

# import numpy_financial as npf
#
# cf = [-1, 1]
# print(npf.irr(cf))

# TODO: ЗАДАЧА: Crypto Mining (Криптовалютный майнинг)
#  Вы решили начать бизнес по добыче криптовалюты в январе 2017 года.
#  Для покупки необходимого оборудования для майнинга требуются первоначальные инвестиции в размере 500 тысяч долларов.
#  Каждый год он сможет добывать 10 монет.
#  Итак, ваш первый возврат будет 1 января 2018 года.
#  Цена монеты за каждый год дана в виде массива в коде.
#  Задача Рассчитайте прибыль за каждый год (2018-2021) и выведите IRR проекта.
#  Вы можете рассчитать, сколько 10 монет будут стоить каждый год, добавить значения в массив,
#  а затем использовать функцию npf.irr() для расчета IRR.
#  Помните, что первым значением массива должна быть первоначальная инвестиция в виде отрицательного значения.
# import numpy_financial as npf
#
# cf1 = [-500000]
# price = [3000, 8000, 29300, 38000]
# for i in price:
#     i *= 10
#     cf1.append(i)
# print(cf1)
# print(npf.irr(cf1))

# TODO: Plotting Data (Отображение данных)
#  Теперь, когда мы знаем, как выполнять основные финансовые расчеты, давайте посмотрим на построение графиков.
#  Python имеет пакет с именем matplotlib, который включает в себя pyplot,
#  используемый для создания графиков и диаграмм.
#  Чтобы использовать его, нам сначала нужно его импортировать:
#      import matplotlib.pyplot as plt
#  plt — это обычное имя, используемое при импорте пакета.
#  Предположим, у нас есть данные о доходах компании за 5 месяцев в виде массива:
#  rev = [18000, 25000, 20000, 45000, 19500]
#  Мы хотим построить диаграмму, актуализирующую данные о доходах.
#  Чтобы создать диаграмму, нам просто нужно вызвать функцию plot для наших данных:
#  Функция savefig() используется для сохранения диаграммы в виде изображения,
#  чтобы ее можно было отобразить на нашей площадке для кода.
# import matplotlib.pyplot as plt
#
# rev = [18000, 25000, 20000, 45000, 32000]
# plt.plot(rev)
# plt.savefig('plot.png')

# TODO: Plotting Data
#  Функция plot() также может принимать значения как для оси x, так и для оси y.
#  Добавим названия месяцев по горизонтальной оси:
#  Теперь вы знаете, как выполнять базовые финансовые расчеты и создавать графики с помощью Python!
#  Вы можете хранить данные в массивах, манипулировать ими и выполнять вычисления с помощью пакетов Numpy и
#  Numpy Financial, а также создавать диаграммы, написав всего пару строк кода.
#  В следующем модуле мы рассмотрим более сложные вопросы (например, цены на акции), так что следите за обновлениями.
# import matplotlib.pyplot as plt
#
# rev = [18000, 25000, 20000, 45000, 32000]
# months = ['June', 'July', 'August', 'September', 'October']
# plt.plot(months, rev)
# plt.savefig('plot.png')

# import numpy_financial as npf
#
# print(npf.fv(rate=0, nper=3, pmt=0, pv=-100))

# TODO: Accessing Data (Доступ к данным)
#  Теперь, когда мы знаем, как выполнять базовые вычисления с помощью Numpy, давайте углубимся в более сложные темы!
#  В этом модуле мы узнаем, как получить доступ к финансовым данным из Интернета.
#  Мы рассмотрим два метода доступа к данным:
#  - просмотр веб-страниц
#  - и использование пакета Python

# TODO: Web Scraping (Веб-скрейпинг)
#  Веб-скрапинг — это процесс использования программы для извлечения содержимого и данных с веб-сайта.
#  Веб-скрапинг извлекает базовый HTML-код веб-сайта.
#  HTML означает язык гипертекстовой разметки и описывает структуру веб-страницы.
#  Этот метод можно использовать для очистки любой общедоступной веб-страницы.
#  Веб-страницы могут иметь ограничения на использование их данных,
#  поэтому обязательно ознакомьтесь с их политикой конфиденциальности,
#  если вы собираетесь использовать данные веб-сайта.

# TODO: Pandas (панельные данные)
#  Чтобы собрать данные из Интернета с помощью Python, нам сначала нужно узнать о Pandas, еще одном полезном пакете.
#  Его можно использовать для очистки и хранения данных в табличном формате.
#  С помощью Pandas нам понадобится всего пара строк кода, чтобы получить нужные данные.
#  Чтобы начать использовать pandas, нам нужно сначала импортировать его:
#      import pandas as pd
#  pd — общепринятая аббревиатура, используемая при импорте библиотеки.
#  Двумя основными компонентами pandas являются Series и DataFrame.
#  Серия — это, по сути, столбец, а DataFrame — это многомерная таблица, состоящая из набора серий.
#  Например, следующий DataFrame состоит из двух серий, возраста и роста: см файл: DataFrame.png
#  Вы можете думать о Series как о массиве, а DataFrame — это набор массивов.

# TODO: Series (Серии)
#  Давайте создадим серию Pandas на основе массива:
# import pandas as pd
#
# prices = [42.8, 102.03, 240.38, 80.9]
# s = pd.Series(prices)
# print(s)
# TODO: Теперь мы можем использовать функции Pandas в Series.
#  Например, мы можем использовать функцию описать describe(), чтобы увидеть ключевую статистику:
# print(s.describe())
# TODO: Вы можете получить доступ к элементам Series аналогично массивам, используя квадратные скобки и индекс.
#  Например: s[1] получит доступ ко второму элементу.
# print(s[1])

# TODO: DataFrame (кадр данных)
#  DataFrame похож на электронную таблицу, хранящую данные в строках и столбцах.
#  Это набор серий, соответствующих столбцам.
#  Давайте создадим DataFrame, который содержит цены и соответствующие им даты:
import pandas as pd

data = {
    'date': ['2021-06-10', '2021-06-11', '2021-06-12', '2021-06-13'],
    'prices': [42.8, 102.03, 240.38, 80.9]
}
df = pd.DataFrame(data)
print(df)
# TODO: Приведенный выше код создает DataFrame с двумя столбцами: дата и цены .
#  Pandas предоставляет множество полезных функций для управления данными в DataFrame.
#  Мы рассмотрим их на следующих уроках, собирая данные из Интернета.
#  Вы можете узнать больше о Pandas и DataFrames в нашем курсе Python для науки о данных.
